<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kampong-Abapagar Modern ABAP</title>
    <link>http://localhost:1313/Kampong-Abapagar/</link>
    <description>Recent content on Kampong-Abapagar Modern ABAP</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 May 2025 23:02:03 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Kampong-Abapagar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Limitations of Legacy ABAP</title>
      <link>http://localhost:1313/Kampong-Abapagar/explanation/limitations-of-legacy-abap/</link>
      <pubDate>Sun, 11 May 2025 20:30:53 +0800</pubDate>
      <guid>http://localhost:1313/Kampong-Abapagar/explanation/limitations-of-legacy-abap/</guid>
      <description>&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;p&gt;The term &lt;strong&gt;Legacy ABAP&lt;/strong&gt; is ambiguous. In this site, Legacy ABAP refers to obsolete language features, ABAP programmer practices that are no longer necessary in modern tool sets, and architectures that have been adopted as a necessary evil.&lt;/p&gt;&#xA;&lt;h2 id=&#34;obsolete-language-features&#34;&gt;Obsolete language features&lt;/h2&gt;&#xA;&lt;p&gt;The ABAP language is also changing with the times, and older language features are becoming less compatible.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Obsolete technics to make complex programs to separate parts (Modularization) like subroutines, and function modules&lt;/li&gt;&#xA;&lt;li&gt;Obsolete calls like &lt;code&gt;CALL TRANSACTION&lt;/code&gt;, &lt;code&gt;CALL METHOD&lt;/code&gt;, and &lt;code&gt;CALL DIALOG&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Internal table definition with &lt;code&gt;WITH HEADER LINE&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;old-style-abap-programmer-practices&#34;&gt;Old style ABAP programmer practices&lt;/h2&gt;&#xA;&lt;p&gt;Some of the difficulty in SAP projects comes from the persistence of practices that should have been eliminated in other IT projects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Calculate Sum From Internal Table</title>
      <link>http://localhost:1313/Kampong-Abapagar/how-to-guides/calculate-sum-from-internal-table/</link>
      <pubDate>Sun, 11 May 2025 09:44:32 +0800</pubDate>
      <guid>http://localhost:1313/Kampong-Abapagar/how-to-guides/calculate-sum-from-internal-table/</guid>
      <description>&lt;h2 id=&#34;use-reduce-with-for-r-in-itab-syntax&#34;&gt;Use &lt;code&gt;REDUCE&lt;/code&gt; with &lt;code&gt;FOR r IN itab&lt;/code&gt; syntax&lt;/h2&gt;&#xA;&lt;p&gt;Awesome constructor operator REDUCE can remove loop and clarify the intent of your code to calculate sum from internal table.&lt;/p&gt;&#xA;&lt;h3 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h3&gt;&#xA;&lt;p&gt;It&amp;rsquo;s typical that &lt;code&gt;TYPE&lt;/code&gt; statement defines structure and internal table with multiple fields including key, characteristics, and figures to clarify the intent of business data. In this case, there are the internal table of purchase order item with amount required. Prefix &lt;code&gt;t_&lt;/code&gt; of table type  &lt;code&gt;t_purchase_order_item&lt;/code&gt; is commonly used for table type&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Calculate Sum in Multiple Currencies</title>
      <link>http://localhost:1313/Kampong-Abapagar/how-to-guides/calculate-sum-in-multiple-currencies/</link>
      <pubDate>Sun, 11 May 2025 11:10:31 +0800</pubDate>
      <guid>http://localhost:1313/Kampong-Abapagar/how-to-guides/calculate-sum-in-multiple-currencies/</guid>
      <description>&lt;h2 id=&#34;use-value-with-for-groups-k-of-r-in-itab-and-reduce-with-in-group-k-syntax&#34;&gt;Use &lt;code&gt;VALUE&lt;/code&gt; with &lt;code&gt;FOR GROUPS k of r IN itab&lt;/code&gt; and &lt;code&gt;REDUCE&lt;/code&gt; with &lt;code&gt;IN GROUP k&lt;/code&gt; syntax&lt;/h2&gt;&#xA;&lt;p&gt;If the internal table contains multiple currencies, the program should calculate the sums for each currency. &lt;code&gt;VALUE&lt;/code&gt; operator is expected to generate new internal table with the currency as the key. &lt;code&gt;REDUCE&lt;/code&gt; operator is expected to generate sum of each currency.&lt;/p&gt;&#xA;&lt;h3 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h3&gt;&#xA;&lt;p&gt;There are two structures and two table types required. The first pair of structure and table is for original data. The second pair is for sum.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Start Unit Testing</title>
      <link>http://localhost:1313/Kampong-Abapagar/how-to-guides/unit-testing/</link>
      <pubDate>Tue, 20 May 2025 23:02:03 +0800</pubDate>
      <guid>http://localhost:1313/Kampong-Abapagar/how-to-guides/unit-testing/</guid>
      <description>&lt;h2 id=&#34;1st-step-to-do&#34;&gt;1st step to do&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-abap&#34; data-lang=&#34;abap&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; lycl_fizzbuzz &lt;span style=&#34;color:#66d9ef&#34;&gt;definition&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; testing risk level harmless duration short.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endclass&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-abap&#34; data-lang=&#34;abap&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;methods&lt;/span&gt; t01_1_to_10 &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; testing.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-abap&#34; data-lang=&#34;abap&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; lycl_fizzbuzz &lt;span style=&#34;color:#66d9ef&#34;&gt;implementation&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;methods&lt;/span&gt; t01_1_to_10.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;(lo_fizzbuzz) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new zcl_fizzbuzz( ).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;(lt_fizzbuzz_act) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lo_fizzbuzz( )&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;generate_fizzbuzz&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; ).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;(lt_fizzbuzz_exp) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;( ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( numebr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         ( &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cl_abap_unit&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;assert_equals&lt;/span&gt;( exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lt_fizzbuzz_act &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     act &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lt_fizzbuzz_exp ).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;endmethod&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endclass&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
